
Azure SQL Database Connection Instructions
========================================

1. Prerequisites
---------------
- Azure account with active subscription
- Azure SQL Database instance
- Node.js installed on your system
- SQL Server Management Studio (SSMS) or Azure Data Studio

2. Create Azure SQL Database
---------------------------
a. Log in to Azure Portal (portal.azure.com)
b. Create new SQL Database resource
   - Select subscription and resource group
   - Choose server or create new one
   - Set database name
   - Configure compute + storage
   - Set admin credentials
   - Note down connection string

3. Configure Firewall Rules
--------------------------
a. Go to database's Networking settings
b. Add client IP address
c. Enable "Allow Azure services" if deploying to Azure

4. Set Up Database Schema
------------------------
a. Connect to your database using SSMS or Azure Data Studio
b. Run the schema creation script from src/utils/dbSetup.ts
   - This creates Users and Transactions tables
   - Adds default test accounts

5. Install Required Dependencies
------------------------------
npm install mssql
npm install dotenv

6. Environment Configuration
--------------------------
a. Create a .env file in the project root:
```
# Azure SQL Database Connection
SQL_SERVER=your-server.database.windows.net
SQL_DATABASE=your-database-name
SQL_USERNAME=your-username
SQL_PASSWORD=your-password
SQL_PORT=1433
SQL_ENCRYPT=true

# API Configuration
NODE_ENV=production
PORT=3001
```

b. Make sure .env is in .gitignore to prevent committing sensitive data

7. Database Connection Setup
---------------------------
The project has database utilities in src/utils/db.ts that handle:
- Connection pooling for efficient resource use
- Error handling for failed connections
- Query execution with parameterization

8. Security Best Practices
-------------------------
- Store connection strings in environment variables
- Use Azure Key Vault for production credentials
- Implement connection pooling (already done in the codebase)
- Use Prepared Statements for queries
- Regularly rotate database credentials
- Enable Azure AD authentication where possible

9. Testing Database Connection
----------------------------
a. Use the test function in db.ts:
```javascript
import { testConnection } from './utils/db';

// Test database connection
const testDb = async () => {
  const connected = await testConnection();
  console.log(`Database connection: ${connected ? 'Success' : 'Failed'}`);
};

testDb();
```

10. Deployment Steps
------------------
a. Set up environment variables in Azure App Service
   - Go to App Service > Configuration > Application settings
   - Add each environment variable from .env
   
b. Deploy backend application
   - Use Azure DevOps, GitHub Actions, or direct deployment
   - Make sure to deploy both frontend and API services
   
c. Test connectivity from your deployed app
   - Monitor logs for connection errors
   - Test endpoints through the application

11. Troubleshooting
-----------------
- Check firewall rules to ensure your services can connect
- Verify connection string details are correct
- Ensure proper database permissions are granted
- Check network connectivity between app and database
- Review Azure SQL logs in Azure Portal for errors
- In Azure App Service, check Application Logs for connection issues

For detailed documentation, visit:
https://learn.microsoft.com/en-us/azure/azure-sql/database/connect-query-nodejs

